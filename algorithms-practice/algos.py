

## QUESTION 1 ##

## If we list all the natural 
## numbers below 10 that are multiples 
## of 3 or 5, we get 3, 5, 6 and 9. 
## The sum of these multiples is 23.
## Find the sum of all the multiples of 3 or 5 below 1000
## Multiples of 3 or 5 ##



## This is a working and tested solution ## 
# number = 1000

# def multiple_of_3_or_5(input):
#     sum = 0
#     for i in range(input):
#         if i % 3 == 0 or i % 5 == 0:
#             sum += i
#     return print(sum)

# multiple_of_3_or_5(number)

#######################################################################

## QUESTION 2 ##
## Even fibonacci Numbers ##

## Each new term in the Fibonacci 
## sequence is generated by adding the 
## previous two terms. By starting with 1 
## and 2, the first 10 terms will be:

## 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... ##

## By considering the terms in the Fibonacci 
## sequence whose values do not exceed four million, 
## find the sum of the even-valued terms.



## THIS IS A WORKING AND TESTED SOLUTION ##
# def even_fibonacci_numbers():
#     sum = 0 
#     prev = 1
#     curr = 2 
#     while curr <= 4000000:
#         if curr % 2 == 0:
#             sum += curr
#         prev, curr, = curr, prev + curr
#     return sum

# print(even_fibonacci_numbers())


#######################################################################

## QUESTION 3 ##
## Largest Prime Factor ##
## The prime factors of 13195 are 5, 7, 13 and 29.
## What is the largest prime factor of the number 600851475143 ? ##

# number = 600851475143

## THIS IS A WORKING AND TESTED SOLUTION ##
# def largest_prime_factor(number):
#     i = 2
#     while i * i < number:
#         while number % i == 0:
#             number = number / i
#         i = i + 1
#     return number

# print(largest_prime_factor(number))







#######################################################################
## QUESTION 4 ##
## Largest Palindrome Product ##
## A palindromic number reads the same both ways.
## The largest palindrome made from the product of
## two 2-digit numbers is 9009 = 91 × 99.
## Find the largest palindrome made from the product of two 3-digit numbers. ##

## THIS IS A WORKING AND TESTED SOLUTION ##

#This `and statement`` is not really needed, but put in just in case of the scenario that there already is a palindrome. In this case, there is not. It is set to 0
# def largest_palindrome_product():
#     palindrome = 0
#     for i in range(100, 1000):
#         for j in range(i, 1000):
#             product = j * i
#             if str(product) == str(product)[::-1] and product > palindrome:  
#                 palindrome = product
#     return palindrome

# print(largest_palindrome_product())



## QUESTION 6 ##
## Sum Square Difference ##
## The sum of the squares of the first ten natural numbers is,
## 1^2 + 2^2 + ... + 10^2 = 385
## The square of the sum of the first ten natural numbers is,
## (1 + 2 + ... + 10)^2 = 55^2 = 3025
## Hence the difference between the sum of the squares of the
## first ten natural numbers and the square of the sum is
## 3025 − 385 = 2640.
## Find the difference between the sum of the squares of the
## first one hundred natural numbers and the square of the sum. ##
## THIS IS A WORKING AND TESTED SOLUTION ##
# def sum_square_difference():
#     sum_of_squares = 0
#     square_of_sum = 0
#     for i in range(1, 101):
#         sum_of_squares += i ** 2
#         square_of_sum += i
#     square_of_sum = square_of_sum ** 2
#     return square_of_sum - sum_of_squares

# print(sum_square_difference())


## QUESTION 7 ##
## 10001st Prime ##
## By listing the first six prime numbers:
## 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
## What is the 10 001st prime number? ##
## THIS IS A WORKING AND TESTED SOLUTION ##
def prime_number():
    prime = 0
    count = 0
    i = 2
    while count < 10001:
        is_prime = True
        for j in range(2, int(i**0.5) + 1):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            prime = i
            count += 1
        i += 1
    return prime

print(prime_number())
